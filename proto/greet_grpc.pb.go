// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: proto/greet.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreetServiceClient is the client API for GreetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreetServiceClient interface {
	// unary
	SayHiUnary(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*Resp, error)
	// server streaming
	SayHiServerStreaming(ctx context.Context, in *UsersList, opts ...grpc.CallOption) (GreetService_SayHiServerStreamingClient, error)
	// client streaming
	SayHiClientStreaming(ctx context.Context, opts ...grpc.CallOption) (GreetService_SayHiClientStreamingClient, error)
	// bidierctional streaming
	SayHiBidierctionalStreaming(ctx context.Context, opts ...grpc.CallOption) (GreetService_SayHiBidierctionalStreamingClient, error)
}

type greetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetServiceClient(cc grpc.ClientConnInterface) GreetServiceClient {
	return &greetServiceClient{cc}
}

func (c *greetServiceClient) SayHiUnary(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/greet_service.GreetService/SayHiUnary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetServiceClient) SayHiServerStreaming(ctx context.Context, in *UsersList, opts ...grpc.CallOption) (GreetService_SayHiServerStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetService_ServiceDesc.Streams[0], "/greet_service.GreetService/SayHiServerStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetServiceSayHiServerStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GreetService_SayHiServerStreamingClient interface {
	Recv() (*Resp, error)
	grpc.ClientStream
}

type greetServiceSayHiServerStreamingClient struct {
	grpc.ClientStream
}

func (x *greetServiceSayHiServerStreamingClient) Recv() (*Resp, error) {
	m := new(Resp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greetServiceClient) SayHiClientStreaming(ctx context.Context, opts ...grpc.CallOption) (GreetService_SayHiClientStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetService_ServiceDesc.Streams[1], "/greet_service.GreetService/SayHiClientStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetServiceSayHiClientStreamingClient{stream}
	return x, nil
}

type GreetService_SayHiClientStreamingClient interface {
	Send(*Req) error
	CloseAndRecv() (*ListResp, error)
	grpc.ClientStream
}

type greetServiceSayHiClientStreamingClient struct {
	grpc.ClientStream
}

func (x *greetServiceSayHiClientStreamingClient) Send(m *Req) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetServiceSayHiClientStreamingClient) CloseAndRecv() (*ListResp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ListResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greetServiceClient) SayHiBidierctionalStreaming(ctx context.Context, opts ...grpc.CallOption) (GreetService_SayHiBidierctionalStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetService_ServiceDesc.Streams[2], "/greet_service.GreetService/SayHiBidierctionalStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetServiceSayHiBidierctionalStreamingClient{stream}
	return x, nil
}

type GreetService_SayHiBidierctionalStreamingClient interface {
	Send(*Req) error
	Recv() (*Resp, error)
	grpc.ClientStream
}

type greetServiceSayHiBidierctionalStreamingClient struct {
	grpc.ClientStream
}

func (x *greetServiceSayHiBidierctionalStreamingClient) Send(m *Req) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetServiceSayHiBidierctionalStreamingClient) Recv() (*Resp, error) {
	m := new(Resp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetServiceServer is the server API for GreetService service.
// All implementations must embed UnimplementedGreetServiceServer
// for forward compatibility
type GreetServiceServer interface {
	// unary
	SayHiUnary(context.Context, *NoParam) (*Resp, error)
	// server streaming
	SayHiServerStreaming(*UsersList, GreetService_SayHiServerStreamingServer) error
	// client streaming
	SayHiClientStreaming(GreetService_SayHiClientStreamingServer) error
	// bidierctional streaming
	SayHiBidierctionalStreaming(GreetService_SayHiBidierctionalStreamingServer) error
	mustEmbedUnimplementedGreetServiceServer()
}

// UnimplementedGreetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGreetServiceServer struct {
}

func (UnimplementedGreetServiceServer) SayHiUnary(context.Context, *NoParam) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHiUnary not implemented")
}
func (UnimplementedGreetServiceServer) SayHiServerStreaming(*UsersList, GreetService_SayHiServerStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHiServerStreaming not implemented")
}
func (UnimplementedGreetServiceServer) SayHiClientStreaming(GreetService_SayHiClientStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHiClientStreaming not implemented")
}
func (UnimplementedGreetServiceServer) SayHiBidierctionalStreaming(GreetService_SayHiBidierctionalStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHiBidierctionalStreaming not implemented")
}
func (UnimplementedGreetServiceServer) mustEmbedUnimplementedGreetServiceServer() {}

// UnsafeGreetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetServiceServer will
// result in compilation errors.
type UnsafeGreetServiceServer interface {
	mustEmbedUnimplementedGreetServiceServer()
}

func RegisterGreetServiceServer(s grpc.ServiceRegistrar, srv GreetServiceServer) {
	s.RegisterService(&GreetService_ServiceDesc, srv)
}

func _GreetService_SayHiUnary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetServiceServer).SayHiUnary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greet_service.GreetService/SayHiUnary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetServiceServer).SayHiUnary(ctx, req.(*NoParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreetService_SayHiServerStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UsersList)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreetServiceServer).SayHiServerStreaming(m, &greetServiceSayHiServerStreamingServer{stream})
}

type GreetService_SayHiServerStreamingServer interface {
	Send(*Resp) error
	grpc.ServerStream
}

type greetServiceSayHiServerStreamingServer struct {
	grpc.ServerStream
}

func (x *greetServiceSayHiServerStreamingServer) Send(m *Resp) error {
	return x.ServerStream.SendMsg(m)
}

func _GreetService_SayHiClientStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetServiceServer).SayHiClientStreaming(&greetServiceSayHiClientStreamingServer{stream})
}

type GreetService_SayHiClientStreamingServer interface {
	SendAndClose(*ListResp) error
	Recv() (*Req, error)
	grpc.ServerStream
}

type greetServiceSayHiClientStreamingServer struct {
	grpc.ServerStream
}

func (x *greetServiceSayHiClientStreamingServer) SendAndClose(m *ListResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetServiceSayHiClientStreamingServer) Recv() (*Req, error) {
	m := new(Req)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GreetService_SayHiBidierctionalStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetServiceServer).SayHiBidierctionalStreaming(&greetServiceSayHiBidierctionalStreamingServer{stream})
}

type GreetService_SayHiBidierctionalStreamingServer interface {
	Send(*Resp) error
	Recv() (*Req, error)
	grpc.ServerStream
}

type greetServiceSayHiBidierctionalStreamingServer struct {
	grpc.ServerStream
}

func (x *greetServiceSayHiBidierctionalStreamingServer) Send(m *Resp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetServiceSayHiBidierctionalStreamingServer) Recv() (*Req, error) {
	m := new(Req)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetService_ServiceDesc is the grpc.ServiceDesc for GreetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "greet_service.GreetService",
	HandlerType: (*GreetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHiUnary",
			Handler:    _GreetService_SayHiUnary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHiServerStreaming",
			Handler:       _GreetService_SayHiServerStreaming_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SayHiClientStreaming",
			Handler:       _GreetService_SayHiClientStreaming_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SayHiBidierctionalStreaming",
			Handler:       _GreetService_SayHiBidierctionalStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/greet.proto",
}
